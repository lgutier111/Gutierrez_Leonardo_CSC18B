/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package SimonPackage;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.border.Border;

/**
 *
 * @author Leo Gutierrez
 * 			CIC18B	-	Java Advanced Object
 * 			Dr Mark Lehr
 * 			Riverside City College
 */
public class SimonWelcome extends JFrame {

    /**
     * Creates new form SimonWelcome
     */
    
	// Declare the game panel class
	protected static Color color = new Color(0,0,0);
	private ObjectInputStream input;
	private int fileStatus;
	private int difficulty;
	private int sound;
	private int R;
	private int G;
	private int B;
    private SimonGamePanel gamePanel;
    
    // Constructor to the splash screen
    public SimonWelcome() {
       try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimonWelcome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimonWelcome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimonWelcome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimonWelcome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
    	readSequentialFile();
    	color = new Color(R, G, B);
    	
        initComponents();
        getContentPane().setBackground(color);
        colorfulSimon();
        placeArcPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

    	// Declare all the buttons and labels to the splash screen
        playButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        simonDescriptionScollPane = new javax.swing.JScrollPane();
        simonDescriptionTextArea = new javax.swing.JTextArea();
        sLabel = new javax.swing.JLabel();
        iLabel = new javax.swing.JLabel();
        mLabel = new javax.swing.JLabel();
        oLabel = new javax.swing.JLabel();
        nLabel = new javax.swing.JLabel();

        // Set the welcome screen parameters
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("S I M O N  Game Play...");
        setAutoRequestFocus(false);
        //setBounds(new java.awt.Rectangle(400, 200, 0, 0));
        //setLocationByPlatform(true);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int height = screenSize.height;
        int width = screenSize.width;
        setSize(width/2, height/2);
        //setMaximumSize(new Dimension(600, 600));
        setName("SimonWelcome"); // NOI18N
        setPreferredSize(new Dimension(600, 600));
        setResizable(false);
        setLocationRelativeTo(null);

        // Play button details
        playButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        
        // Exit button details
        exitButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        // Scroll pane details
        simonDescriptionScollPane.setFont(new Font("Calibri", 0, 11)); // NOI18N

        simonDescriptionTextArea.setEditable(false);
        simonDescriptionTextArea.setBackground(color);
        simonDescriptionTextArea.setForeground(Color.YELLOW);
        simonDescriptionTextArea.setColumns(20);
        simonDescriptionTextArea.setFont(new Font("Calibri", 0, 14)); // NOI18N
        simonDescriptionTextArea.setLineWrap(true);
        simonDescriptionTextArea.setRows(5);
        
        Border empty;
        empty = BorderFactory.createEmptyBorder();
        simonDescriptionScollPane.setBorder(empty);
        
        simonDescriptionTextArea.setText("    Do what SIMON says...\n\n Follow the pattern of lights\n   "
        		+ "and sounds for as long as\n"
        		+ "                  you can...");
        simonDescriptionTextArea.setWrapStyleWord(true);
        simonDescriptionTextArea.setCursor(new Cursor(Cursor.TEXT_CURSOR));
        simonDescriptionScollPane.setViewportView(simonDescriptionTextArea);

        
        // Individual SIMON labels for each letter.  Coded this way to change the color for each letter constantly while the splash
        // screen is visible.
        
        // S Label
        sLabel.setFont(new java.awt.Font("Gulim", 0, 24));
        sLabel.setText("S");
        
        // I Label
        iLabel.setFont(new java.awt.Font("Gulim", 0, 24));
        iLabel.setText("I");

        // M Label
        mLabel.setFont(new java.awt.Font("Gulim", 0, 24));
        mLabel.setText("M");

        // O Label
        oLabel.setFont(new java.awt.Font("Gulim", 0, 24));
        oLabel.setText("O");

        // N Label
        nLabel.setFont(new java.awt.Font("Gulim", 0, 24));
        nLabel.setText("N");
        
        
        // Horizontal and Vertical group layouts for the items on the spash screen
        //    Automated in NetBeans using the GUI Builder
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addComponent(sLabel)
                        .addGap(18, 18, 18)
                        .addComponent(iLabel)
                        .addGap(18, 18, 18)
                        .addComponent(mLabel)
                        .addGap(18, 18, 18)
                        .addComponent(oLabel)
                        .addGap(18, 18, 18)
                        .addComponent(nLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(playButton)
                            .addComponent(exitButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(simonDescriptionScollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(244, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sLabel)
                    .addComponent(iLabel)
                    .addComponent(mLabel)
                    .addComponent(oLabel)
                    .addComponent(nLabel))
                .addGap(37, 37, 37)
                .addComponent(simonDescriptionScollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addComponent(playButton)
                .addGap(75, 75, 75)
                .addComponent(exitButton)
                .addGap(115, 115, 115))
        );

        pack();
        
    }// </editor-fold>                        

    // Call and place the Arc Panel 
    private void placeArcPanel(){
    	arcsJPanel = new ArcsJPanel();
        arcsJPanel.setBackground(color);
        arcsJPanel.setSize(260, 170);
        arcsJPanel.setLocation(80, 227);
        arcsJPanel.setVisible(true);
        getContentPane().add(arcsJPanel);
    }
    
    // The colorful SIMON labels
    private void colorfulSimon(){
    	sLabel.setForeground(Color.BLUE);
		iLabel.setForeground(Color.RED);
		mLabel.setForeground(Color.GREEN);
		oLabel.setForeground(Color.YELLOW);
		nLabel.setForeground(Color.MAGENTA);
    }
    
    public void readSequentialFile(){
    	openFile();
    	readRecord();
    	closeFile();
    }
    
    public void openFile(){
    	try
    	{
    		input = new ObjectInputStream(Files.newInputStream(Paths.get("simonsettings.ser")));
    	} 
    	catch (IOException ioException)
    	{
    		System.err.println("Error opening file.");
    		System.exit(1);
    	}
    }
    
    public void readRecord(){
    	try
    	{
    		while (true)
    		{
    			GameSettings setting = (GameSettings) input.readObject();
    			fileStatus = setting.getFileStatus();
    			difficulty = setting.getDifficulty(); 
    			sound = setting.getSound();
    			R = setting.getR();
    			G = setting.getG();
    			B = setting.getB();
    			
    			//System.out.println("Settings in file are fileStatus: " + fileStatus +
    			//		"difficulty: " + difficulty +
    			//		"sound: " + sound +
    			//		"R setting: " + R +
    			//		"G setting: " + G +
    			//		"B setting: " + B);
    		}
    	}
    	catch (EOFException endOfFileException)
    	{
    		System.err.println("No More Records");
    	}
    	catch (ClassNotFoundException classNotFoundException)
    	{
    		System.err.println("Invalid object type.  Terminating. ");
    	}
    	catch (IOException ioException)
    	{
    		System.err.println("Error reading from file.  Terminating.");
    	}
    }
    
    public void closeFile(){
    	try
    	{
    		if (input != null)
    			input.close();
    	}
    	catch (IOException ioException)
    	{
    		System.err.println("Error closing file.  Terminating.");
    		System.exit(1);
    	}
    }
    
    // Play Button action defined
    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //System.out.println("You have pressed the play button in SimonWelcome");
        remove(playButton);
        remove(exitButton);
        remove(simonDescriptionTextArea);
        remove(simonDescriptionScollPane);
        remove(sLabel);
        remove(iLabel);
        remove(mLabel);
        remove(oLabel);
        remove(nLabel);
        remove(arcsJPanel);

		gamePanel = new SimonGamePanel();
        
        getContentPane().add(gamePanel);
        gamePanel.setBackground(color);
        gamePanel.setSize(600, 600);
        pack();
        gamePanel.setVisible(true);
    }                                          
    
    // Exit button action defined
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        System.exit(0); 
    }                                          
    // Variables declaration - do not modify                     
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel sLabel;
    private javax.swing.JLabel iLabel;
    private javax.swing.JLabel mLabel;
    private javax.swing.JLabel nLabel;
    private javax.swing.JLabel oLabel;
    private javax.swing.JButton playButton;
    private javax.swing.JScrollPane simonDescriptionScollPane;
    private javax.swing.JTextArea simonDescriptionTextArea;
    private ArcsJPanel arcsJPanel;

    // End of variables declaration                   
}
